<script type="text/javascript">   
    
main(true) 
  
function main(isTesting = false) {
  
  // -----------------------------------------
  
  // Game Memory
  let gameState = {
    appIsActive: true,
    gameIsActive: true,
    name: 'Hero',
    hp: 20,
    attackBonus: 3,
    damage: 4,
    armorClass: 16,
    cheese: 2,  
    monsterList: []
  }

  
  // -----------------------------------------
  // Game Details
  const monsters = [
    { 
      id: 0,
      minCount: 2,
      maxCount: 3,
      name: 'skeleton',
      hp: 3,
      attackBonus: 5,
      damage: 2,
      armorClass: 13,
      backpack: ['cheese']
    },
    { 
      id: 1,
      minCount: 1,
      maxCount: 2,
      name: 'zombie',
      hp: 6,
      attackBonus: 3,
      damage: 4,
      armorClass: 15,
      backpack: ['cheese']
    },
    { 
      id: 2,
      minCount: 1,
      maxCount: 1,
      name: 'dragon',
      hp: 20,
      attackBonus: 10,
      damage: 10,
      armorClass: 18,
      backpack: ['gold']
    }
  ]
  
  const optionsText = "Explore | Examine | Exit"
  const cheeseHPBoost = 10;
  const defendActionBoost = 5;
  const promptAction = '\n What are you going to do?\n (a)ttack | (d)efend | (h)eal';
  
  const optionsLook = {
    1: 'The crypt ceilings are not visible in the darkness, but the echoes coursing through the depths suggest unfathomed height.',
    2: 'This crypt is haunted by skeletons and zombies...they can come out of nowhere...',
    3: 'This crypt smells like centuries of damp dust and decay. The sounds of creaking bones and the moans of the undead stir listlessly around you.',
    4: 'It is so dark, your meager lamplight illuminates only a couple of feet ahead of you. What is lurking in the shadows beyond?',
    5: 'Some locals swear the dragon is still in here somewhere...'
  }
  
  
  // -----------------------------------------
  // Begin Execution
  // Start Application Loop
  startApp(gameState)
  
  // -----------------------------------------
  // Game Functions
  
  function startApp(gameState) {

    // Menu screen (top-level loop)
    while(gameState.appIsActive) {
      let option = prompt('Welcome to The Elder Scripts III!  Play | Quit');
      
      
      if(option === null) {
        gameState = exitApp(gameState)
      } else {
        
        option = option.toLowerCase()
        
        switch (option) {
          case 'play':
            startGame(gameState)
            break;

          case 'quit':
            gameState = exitApp(gameState)
            break;
        }
      
      }
    }
    
  }

  // --------------
  function startGame(state) {
    
    // Generate a list of monsters
//     state.monsterList = monsters.reduce((list, monster) => (
//       list = [...list, ...Array(randomizer(monster.maxCount, monster.minCount)).fill(monster)]
//     ), [])
    state.monsterList = [...monsters]
    console.table(state)
    
    // Initialize the initial state
    // Example: 
    //    default: gameState
    //    gameStates: [gameState1, gameState2, gameState3]
//     console.log(state);
    gameState.hp = 20;
    gameState.cheese = 2;
    monsters[0].hp = 3;
    monsters[1].hp = 4;
    monsters[2].hp = 20;
    
    while(state.gameIsActive === true) {
    
      
      // Current Stats Board - Appended to Prompt
//       let bpItems = gameState.backpack.map( x => ' ' + x.charAt(0).toUpperCase() + x.slice(1) );
      let currStats = 'Current Stats\n--------------\nHealth: ' + gameState.hp + '\n' + gameState.attackBonus + ' (Attack) / ' + gameState.armorClass + 
          ' (Defense) / ' + gameState.damage + ' (Damage)\nBackpack: ' + gameState.cheese + ' Cheese' + '\n\n';
      
      // Phase 1
      let userSelection = input(currStats + 'Within a dark, mysterious crypt you hunt for a famed dragon\'s hoard.\nWhat would you like to do?\n' + optionsText)
      
      // Exits the game if the user selects "Cancel"
      // Prevents an infinite loop
      if(userSelection === null) {
        state = exitGame(gameState)
      }
      
      userSelection = userSelection && userSelection.toLowerCase().trim()
      
      // Phase 2
      // Run the selected action;
      //     Creates a new "game board" based
      //     on the end result of the action
      // Returns an object
      state = executeAction(state, userSelection)
    }
  }
  
  // --------------
  function executeAction(state, action, currStats) {
    console.log(state)
    // Fight | Look | Exit
    switch (action) {
      case 'explore':
        return fightAction(state)
      case 'examine':  // 
        return lookAction(state);
      case 'exit':
        return exitGame(state)
        
      default: 
        return state
    }
  }
  
  // --------------
  function fightAction(state){
   
    let fightState = state;
    console.table(state)
    
    //im not sure how this works <<joel>>
    let opponent = opponentSelector(state); 
    
    // sets the default action to begin to activate the first round message
    let action = 'begin';
    
    const secretPower  = {
      appIsActive: true,
      gameIsActive: true,
      name: 'Hero',
      hp: 100,
      attackBonus: 100,
      damage: 100,
      armorClass: 100,
      cheese: 2,  
      monsterList: []
    }
        


  //---combat recursion loop start---------------------  
    
    function calculateFight (fightState, opponent, num, action) { //recursive function
      
  //---base cases----------------------------
      
      //base case for PC death
      if (fightState.hp <= 0) { 
      
        let tryAgain = input('YOU ARE DEAD. Continue or Quit?')
        tryAgain = tryAgain.toLowerCase().trim();

        switch (tryAgain) {
          case 'continue':
          return startApp(gameState)

          case 'quit':
          return exitGame(gameState);

          default:
          return startApp(gameState);
        }
      }
      
      //base case for NPC death
      if (opponent.hp <= 0) {
        
        let continueGame;
        
        if (opponent.id === 2) {
          continueGame = input('You defeeated..the dragon...!? How? Will you tell me how? (y/n)');
        }
        else {
          continueGame = input('The ' + opponent.name + ' has been defeated! And you found some cheese! Dare to continue? (y/n)')
        }

          continueGame = continueGame && continueGame.toLowerCase().trim()
        
        if (fightState.cheese) {
          fightState.cheese = fightState.cheese + 1;
        } 
        else {
          fightState.cheese = 1;
        }
        
        // Remove the monster from the list.  This is done because the
        //    opponentSelector function always checks the array head.
        let [deadMonster, ...remainingMonsters] = state.monsterList
        
        state.monsterList = [...remainingMonsters]
        
        switch (continueGame) {
          case 'y':
          return fightState;
          
          case 'n':
          return exitGame();
      
          default:
          return fightState;
        }
      }

  //---combat loop control flow-------------------------------------------      
      
      //fix the action input
      //if not null, lowercase
      //if null, xit loop
      if (action === null) {
        return exitGame(fightState);
      } else {
        action = action.toLowerCase().trim();
      }

  //---default action for first round of combat-------------------      
      
      //if this is the first round of combat
      if (action == 'begin' ) {
        
        confirm('LOOK OUT! IT\S A ' + opponent.name.toUpperCase() + '!');
     
      }
   
  //---Heal Action------------------------------------    
      
      //PC is healing
      if (action == 'heal' || action == 'h') {
        
        //if PC has cheese, they can use it to heal
        if (fightState.cheese) {

          fightState.hp = fightState.hp + cheeseHPBoost;
          
          //they consume one cheese from their inventory
          fightState.cheese = fightState.cheese - 1;
          
          //if they use all their cheese, it goes away. PC can get more cheese from killing monsters 
          if (fightState.cheese === 0) {
            delete fightState.cheese;
          }
          confirm('You recieved ' + cheeseHPBoost + ' HP from eating cheese! You have ' + fightState.hp + ' HP!');
        }
        
        //if PC has no cheese, they get a warning
        else {
          confirm('You are out of cheese! Keep an eye on your stats! \n' + 'Current HP = ' + fightState.hp + '\n Current Cheese: ' + fightState.cheese);
        }
      }
      
  //---Defend Action & get next user action---------------------------------------------

      //the NPC goes first each subsequent round (I think this sometimes gets skipped)
      //if PC is defending
      if (action == 'defend' || action == 'd') {
        
        //PC is defending but gets hit
        if (opponent.attackBonus + num >= (state.armorClass + defendActionBoost)) {
          
          //reduce PC hp by NPC damage
          state.hp = state.hp - opponent.damage;
          action = input('You try to block, but the ' + opponent.name + '\'s attack strikes you for ' + opponent.damage + '!\n\n' + 'Current HP = ' + fightState.hp + '\n Current Cheese: ' + fightState.cheese + '\n' + promptAction);
          return calculateFight(state, opponent, randomizer(20), action);
        }
        
        //PC is defending and blocks
        else {
          action = input('The ' + opponent.name + ' attacks, but you block the attack!\n\n ' +'Current HP = ' + fightState.hp + '\n Current Cheese: ' + fightState.cheese + '\n' + promptAction);
          return calculateFight(fightState, opponent, randomizer(20), action);
        }
      }
      
  //---NPC attack action & get next user action-----------------------------------------------
      
      else {
        
        //PC gets hit by attack
        if (opponent.attackBonus + num >= state.armorClass) {
          
        //reduce PC hp by NPC damage
          fightState.hp = fightState.hp - opponent.damage;   
          action = input('The ' + opponent.name + ' hit you for ' + opponent.damage + ' damage!\n\n ' + 'Current HP = ' + fightState.hp + '\n Current Cheese: ' + fightState.cheese + '\n' + promptAction);
        }

        //PC dodges attack
        else {
          action = input('The ' + opponent.name + ' attacks, but you dodge!\n\n ' + 'Current HP = ' + fightState.hp + '\n Current Cheese: ' + fightState.cheese + '\n' + promptAction);  
        }
      }
      
  //---PC Attack action-------------------------------------------------------------------
      
      // Attack
      if (action == 'attack' || action == 'a') {
        
        //PC hits 
        if (fightState.attackBonus + num >= opponent.armorClass) { 
          
          //reduce NPC hp by PC damage
          opponent.hp = opponent.hp - fightState.attackBonus; 
          confirm('You attack the ' + opponent.name + ' for ' + fightState.damage + ' damage!');
  
          return calculateFight(fightState, opponent, randomizer(20), action)
        }
        
        //PCmisses
        else {
          confirm('Your attack is blocked by the ' + opponent.name + '!');
          return calculateFight(fightState, opponent, randomizer(20), action)
        }    
      }
      
 
    if (action == 'up up down down left right left right b a') {
      fightState.hp = 100;
      if (secretPower.attackBonus >= opponent.armorClass) {
        opponent.hp = opponent.hp - secretPower.damage;
      }
      let answer = input('This foe is too great!\n Unleash the power of closure!\n Will you utter the Sentance of Power? (y/n)')
      
      confirm('You strike with the Wrath of a Thousand Teaching Fellows! Dealing ' + secretPower.damage + ' damage to ' + opponent.name + '!')
      return calculateFight(fightState, opponent, randomizer(20), action)
    }    
        
      

      return calculateFight(fightState, opponent, randomizer(20), action);
  }
    
  //---call recursive function to start combat loop-----------------------------------
    
  return calculateFight(fightState, opponent, randomizer(20), action);
}
      
  // --------------
  function opponentSelector(state){
    
    return state.monsterList[0]
  }
  
  // --------------
  function exitGame(state) {
    output('You left the game.')
    return {...state, gameIsActive: false}
  }
  
  // --------------
  function exitApp(state) {
    output('Thanks for playing!')
    exit();
  }
  
  // --------------
  function viewStatus(state) {
    output('Your Status: <br>');
    output(JSON.stringify(state.player, null, 2));
    return state
  }
  
  function lookAction(state) {
    output(lookGenerator(state));
    return state
  } 
  
  function undoAction(states) {
    states = removeLastElement(states)
    return states[states.length - 1]
  }

  // --------------
  function output(str) {
    document.write(JSON.stringify(str, null, 2) + '<br>')
  }


  // --------------
  function input(str) {
    return prompt(str)
  }
  
  // --------------
  function devLog(...rest) {
    if(isTesting) {
      console.log(...rest)
      document.write(JSON.stringify(rest, null, 2) + '<br>')
    }
    // else, show nothing if app is live
  }
  
  // --------------
  // Option for randomizing rooms and opponents
  function randomizer(max, min = 1){
    return Math.floor((Math.random() * max) + min);
  }
  
  // --------------
  function lookGenerator(state){
    let story = randomizer(5, 1);
    return confirm(optionsLook[story.toString()])
  }
  
  // --------------
  
  
  function shuffle(originalArray) {
    let newArray = [...originalArray]
      for (let index = newArray.length - 1; i > 0; i--) {
          const randomNumber = Math.floor(Math.random() * (i + 1));
          [newArray[index], newArray[randomNumber]] = [newArray[randomNumber], newArray[index]];
      }

      return newArray;
    }  

}
  

  
  


/* Game Notes

Game Flow:

1. User runs game. Press green 'Run' button at the bottom.
2. Prompt "Welcome to The Elder Scripts III!  Play | Load Last Save // Denny | Quit"
3. Play:  Output -> Initial story text, sets the scene.
4. Prompt Action Loop: Fight | Explore | Status | Exit | Undo

  a. Fight
      -> Prompt: Story Text with Monster. Attack | Defend | Item | Run
            a. Attack
            b. Defend
            c. Item
            d. Run
      -> Creates new state based on current state value *MOST COMPLICATED 
      -> Print end result, goes back to Action Loop
      
  b. Explore
      -> Output - Filler Text, randomizer 
      
  c. Status
      -> Output - current player's state: health, attack rating
      
  d. Exit
      -> exitGame function, ends current loop, goes back to StartGame loop
      
  e. Undo
      -> DENNY
      
5. Returns to startGame options, Returns to number 2.





> The Elder Scripts III

> One class - fighter
  >> attack
  >> block
  >> run
  >> use item
  backpack: [cheese, sword, shield, cheese]

const fighter = {
  attack: 5, 
  defense: 12,
  speed: 30,
  backpack: [
    cheese,
    sword,
    shield
  ]
  
}

>random array of opponents (3)
>> (0) skeleton, (1) zombie, (2) dragon

>>>skeleton
  >hp
  >armor class
  >attack

>>>zombie
  >hp
  >armor class
  >bite 
  >attack

>>>dragon
  >hp
  >armor class
  >fire attack

>> certain # of chambers 
>>>

>>Features

1) game loop start to finish (do while PC hp > 0??) 
2) get PC
3) random chambers --> encounters
4) NPC
5) control flow(while NPC hp > 0) for attacking and defending 
  > if PC hp = 0 end
6) PC goes to new loop in #3
7) health points tracking
8) flavor text (narative)
*/
// --------------
</script>
